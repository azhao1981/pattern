# This is code of composite pattern . Generated by pattern.
# 
require "#lc_class_name#"

class #composite_name# < #class_name#
  def initialize(name)
  	super(name)
  	@sub_#lc_class_name#s = []
  end
  def add_sub_#lc_class_name#(#lc_class_name#)
  	@sub_#lc_class_name#s << #lc_class_name#
  	#lc_class_name#.parent = self
  end
  def remove_sub_#lc_class_name#(#lc_class_name#)
  	@sub_#lc_class_name#s.delete(#lc_class_name#)
  	#lc_class_name#.parent = nil
  end
  def << (#lc_class_name#)
  	@sub_#lc_class_name#s << #lc_class_name#
  	#lc_class_name#.parent = self
  end
  def [](index)
  	@sub_#lc_class_name#s[index]
  end
  def []=(index,new_value)
  	@sub_#lc_class_name#s[index].parent = nil
  	@sub_#lc_class_name#s[index] = new_value
  	@sub_#lc_class_name#s[index].parent = self
  end
  # TODO: operations
#operations#
end
